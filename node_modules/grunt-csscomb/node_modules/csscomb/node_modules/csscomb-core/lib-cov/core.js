
  // instrument by jscoverage, do not modifly this file
  (function(file, lines, conds, source) {
      var BASE;
      if (typeof global === "object") {
          BASE = global;
      } else if (typeof window === "object") {
          BASE = window;
      } else {
          throw new Error("[jscoverage] unknow ENV!");
      }
      if (BASE._$jscoverage) {
          BASE._$jscmd(file, "init", lines, conds, source);
          return;
      }
      var cov = {};
      /**
   * jsc(file, 'init', lines, condtions)
   * jsc(file, 'line', lineNum)
   * jsc(file, 'cond', lineNum, expr, start, offset)
   */
      function jscmd(file, type, line, express, start, offset) {
          var storage;
          switch (type) {
            case "init":
              if (cov[file]) {
                  storage = cov[file];
              } else {
                  storage = [];
                  for (var i = 0; i < line.length; i++) {
                      storage[line[i]] = 0;
                  }
                  var condition = express;
                  var source = start;
                  storage.condition = condition;
                  storage.source = source;
              }
              cov[file] = storage;
              break;

            case "line":
              storage = cov[file];
              storage[line]++;
              break;

            case "cond":
              storage = cov[file];
              storage.condition[line]++;
              return express;
          }
      }
      BASE._$jscoverage = cov;
      BASE._$jscmd = jscmd;
      jscmd(file, "init", lines, conds, source);
  })("lib/core.js", [1,2,3,4,11,15,37,27,29,33], {}, ["var gonzales = require('gonzales-pe');","var minimatch = require('minimatch');","var vow = require('vow');","var vfs = require('vow-fs');","","/**"," * @param {Array} predefinedOptions"," * @constructor"," * @name Comb"," */","var Comb = function() {","    // nani","};","","Comb.prototype = {","    // List of file paths that should be excluded from processing:","    excludedPaths_: [],","","    /**","     * Checks if path is present in `exclude` list.","     *","     * @param {String} path","     * @returns {Boolean} False if specified path is present in `exclude` list.","     * Otherwise returns true.","     */","    shouldProcess_: function shouldProcess(path) {","        var excludedPaths = this.excludedPaths_;","","        path = path.replace(/^\\.\\//, '');","        for (var i = excludedPaths.length; i--;) {","            if (excludedPaths[i].match(path)) return false;","        }","        return true;","    }","};","","module.exports = Comb;","",""]);
_$jscmd("lib/core.js", "line", 1);

var gonzales = require("gonzales-pe");

_$jscmd("lib/core.js", "line", 2);

var minimatch = require("minimatch");

_$jscmd("lib/core.js", "line", 3);

var vow = require("vow");

_$jscmd("lib/core.js", "line", 4);

var vfs = require("vow-fs");

_$jscmd("lib/core.js", "line", 11);

/**
 * @param {Array} predefinedOptions
 * @constructor
 * @name Comb
 */
var Comb = function() {};

_$jscmd("lib/core.js", "line", 15);

Comb.prototype = {
    // List of file paths that should be excluded from processing:
    excludedPaths_: [],
    /**
     * Checks if path is present in `exclude` list.
     *
     * @param {String} path
     * @returns {Boolean} False if specified path is present in `exclude` list.
     * Otherwise returns true.
     */
    shouldProcess_: function shouldProcess(path) {
        _$jscmd("lib/core.js", "line", 27);
        var excludedPaths = this.excludedPaths_;
        _$jscmd("lib/core.js", "line", 29);
        path = path.replace(/^\.\//, "");
        for (var i = excludedPaths.length; i--; ) {
            if (excludedPaths[i].match(path)) return false;
        }
        _$jscmd("lib/core.js", "line", 33);
        return true;
    }
};

_$jscmd("lib/core.js", "line", 37);

module.exports = Comb;